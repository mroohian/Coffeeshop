/*
 * File: app/controller/ProductController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Coffeeshop.controller.ProductController', {
    extend: 'Ext.app.Controller',

    uses: [
        'Ext.picker.Picker'
    ],

    config: {
        views: [
            'CoffeeContainer',
            'SnacksContainer',
            'CakesContainer'
        ],

        refs: {
            orderlist: 'list#orderlist'
        },

        control: {
            "dataview#coffeedataview": {
                itemsingletap: 'coffeeDataViewItemTapped'
            },
            "dataview#snacksdataview": {
                itemsingletap: 'snacksDataViewItemTapped'
            },
            "dataview#cakesdataview": {
                itemsingletap: 'cakesDataViewItemTapped'
            },
            "picker#coffeePicker": {
                change: 'coffeePickerChanged'
            },
            "picker#snacksPicker": {
                change: 'snacksPickerChanged'
            },
            "picker#cakesPicker": {
                change: 'cakesPickerChanged'
            }
        }
    },

    coffeeDataViewItemTapped: function(dataview, index, target, record, e, eOpts) {
        var targetEl = e.target,
            action = targetEl.getAttribute('action'),
            name = record.get('name'),
            picker = this.getCoffeePicker();

        if (action == 'delete') {
            this.deleteOrder(record);
        } else {
            picker.getToolbar().setTitle(name);
            picker.record = record;
            picker.show();
        }
    },

    snacksDataViewItemTapped: function(dataview, index, target, record, e, eOpts) {
        var targetEl = e.target,
            action = targetEl.getAttribute('action'),
            name = record.get('name'),
            picker = this.getSnacksPicker();

        if (action == 'delete') {
            this.deleteOrder(record);
        } else {
            picker.getToolbar().setTitle(name);
            picker.record = record;
            picker.show();
        }
    },

    cakesDataViewItemTapped: function(dataview, index, target, record, e, eOpts) {
        var targetEl = e.target,
            action = targetEl.getAttribute('action'),
            name = record.get('name'),
            picker = this.getCakesPicker();

        if (action == 'delete') {
            this.deleteOrder(record);
        } else {
            picker.getToolbar().setTitle(name);
            picker.record = record;
            picker.show();
        }
    },

    coffeePickerChanged: function(picker, value, eOpts) {
        var record = picker.record,
            name = record.get('name'),
            count = value.count;

        navigator.notification.alert('Adding ' + count + ' cup(s) of :' + name, null, 'Order');

        this.addOrder(record, count);
    },

    snacksPickerChanged: function(picker, value, eOpts) {
        var record = picker.record,
            name = record.get('name'),
            count = value.count;

        navigator.notification.alert('Adding ' + count + ' serving(s) of :' + name, null, 'Order');

        this.addOrder(record, count);
    },

    cakesPickerChanged: function(picker, value, eOpts) {
        var record = picker.record,
            name = record.get('name'),
            count = value.count;

        navigator.notification.alert('Adding ' + count + ' slice(s) of :' + name, null, 'Order');

        this.addOrder(record, count);
    },

    createPicker: function(itemId, data) {
        return Ext.Viewport.add({
            xtype: 'picker',
            itemId: itemId,
            slots: [
                {
                    name : 'count',
                    data : data
                }
            ]
        });

    },

    getCoffeePicker: function() {
        var picker;

        if (this.coffeePicker) {
            picker = this.coffeePicker;
        } else {
            this.coffeePicker = picker = this.createPicker('coffeePicker', [
                {text: '1 Cup', value: 1},
                {text: '2 Cups', value: 2},
                {text: '3 Cups', value: 3},
                {text: '4 Cups', value: 4},
                {text: '5 Cups', value: 5},
                {text: '10 Cups', value: 10},
                {text: '15 Cups', value: 15},
                {text: '20 Cups', value: 20},
                {text: '50 Cups', value: 50},
                {text: '100 Cups', value: 100}
            ]);
        }

        return picker;
    },

    getSnacksPicker: function() {
        var picker;

        if (this.snacksPicker) {
            picker = this.snacksPicker;
        } else {
            this.snacksPicker = picker = this.createPicker('snacksPicker', [
                {text: '1 Serving', value: 1},
                {text: '2 Servings', value: 2},
                {text: '3 Servings', value: 3},
                {text: '4 Servings', value: 4},
                {text: '5 Servings', value: 5}
            ]);
        }

        return picker;
    },

    getCakesPicker: function() {
        var picker;

        if (this.cakesPicker) {
            picker = this.cakesPicker;
        } else {
            this.cakesPicker = picker = this.createPicker('cakesPicker', [
                {text: '1 Slice', value: 1},
                {text: '2 Slices', value: 2},
                {text: '3 Slices', value: 3},
                {text: '4 Slices', value: 4},
                {text: '5 Slices', value: 5},
                {text: '10 Slices', value: 10}
            ]);
        }

        return picker;
    },

    addOrder: function(record, count) {
        var currentCount = record.get('count'),
            orderList = this.getOrderlist(),
            orderStore = orderList.getStore();

        // Increase the count value
        record.set('count', count + currentCount);

        // ExtJs will automatically update if record is already added to the store
        // id field indicate uniqueness of models
        orderStore.add(record);
    },

    deleteOrder: function(record) {
        var orderList = this.getOrderlist(),
            orderStore = orderList.getStore();

        record.set('count', 0);
        orderStore.remove(record);
    }

});