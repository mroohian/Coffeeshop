/*
 * File: app/controller/OrderController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Coffeeshop.controller.OrderController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            orderlist: 'list#orderlist'
        },

        control: {
            "button#checkoutButton": {
                tap: 'checkoutButtonTapped'
            },
            "list#orderlist": {
                itemtap: 'orderListItemTapped'
            }
        }
    },

    checkoutButtonTapped: function(button, e, eOpts) {
        var dataview = this.getOrderlist(),
            store = dataview.getStore();

        if (store.getCount() < 1) {
            navigator.notification.alert('Order is empty!', null, 'Checkout Error', 'Done');
            return;
        }

        var orderID = "ORDER-1000" + Ext.idSeed++;

        this.deleteAll(store);

        navigator.notification.alert('Order received!\nReference No.' + orderID, null, 'Checkout', 'Done');
    },

    orderListItemTapped: function(dataview, index, target, record, e, eOpts) {
        var targetEl = e.target,
            action = targetEl.getAttribute('action'),
            store = dataview.getStore();

        if (action) {
            //console.log(action);

            switch (action) {
                case 'increase':
                    return this.increaseRow(store, record);
                case 'decrease':
                    return this.decreaseRow(store, record);
                case 'delete':
                    return this.deleteRow(store, record);
            }
        }

        //console.log('unhandled event', e, eOpts);
    },

    increaseRow: function(store, record) {
        var count = record.get('count');

        record.set('count', count+1);
    },

    decreaseRow: function(store, record) {
        var count = record.get('count');

        if (count > 1 ) {
            record.set('count', count-1);
        }
    },

    deleteRow: function(store, record) {
        record.set('count', 0);
        store.remove(record);
    },

    deleteAll: function(store) {
        store.each(function(record, index, length) {
            record.set('count', 0);
        });

        store.removeAll();
    }

});